(undo-tree-save-format-version . 1)
"7eaa1f490f06bbb9e3adeb5816dd3f6c9e275ee8"
[nil nil nil nil (25342 55311 753622 500000) 0 nil]
([nil nil ((#("            clik = nlsig2 - jacob
            return clik
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 58 (fontified t)) . 4729) (undo-tree-id11 . -34) (undo-tree-id12 . -34) (undo-tree-id13 . -34) (undo-tree-id14 . -34) 4763 (t 25341 14519 565010 900000)) nil (25343 52696 995091 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5520 . 5521) (#("
" 0 1 (fontified nil)) . -5566) (5508 . 5567) 5485) nil (25343 52696 995088 200000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -5547) (undo-tree-id5 . -12) (undo-tree-id6 . -12) (undo-tree-id7 . -12) (undo-tree-id8 . -12) (5539 . 5547) (#("            " 0 11 (fontified nil) 11 12 (rear-nonsticky t fontified nil)) . -5517) (undo-tree-id9 . -12) (undo-tree-id10 . -12) (5509 . 5517) 5555) nil (25343 52712 351637 800000) 0 nil])
([nil nil ((#("            clik = nlsig2 - jacob
            return clik
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 34 (fontified t) 34 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 57 (fontified t) 57 58 (fontified t)) . 5451) (undo-tree-id308 . -12) (undo-tree-id309 . -58) (undo-tree-id310 . -58) (undo-tree-id311 . -58) (undo-tree-id312 . -34) (undo-tree-id313 . -35) (undo-tree-id314 . -38) (undo-tree-id315 . -39) (undo-tree-id316 . -42) (undo-tree-id317 . -43) (undo-tree-id318 . -1) (undo-tree-id319 . -4) (undo-tree-id320 . -5) (undo-tree-id321 . -8) (undo-tree-id322 . -9) (undo-tree-id323 . -12) (undo-tree-id324 . -12) (undo-tree-id325 . -12) (undo-tree-id326 . -12) (undo-tree-id327 . -12) (undo-tree-id328 . -12) (undo-tree-id329 . -12) (undo-tree-id330 . -12) (undo-tree-id331 . -12) (undo-tree-id332 . -12) (undo-tree-id333 . -12) (undo-tree-id334 . -12) (undo-tree-id335 . -12) (undo-tree-id336 . -12) (undo-tree-id337 . -12) (undo-tree-id338 . -12) (undo-tree-id339 . -12) (undo-tree-id340 . -12) (undo-tree-id341 . -12) (undo-tree-id342 . -12) (undo-tree-id343 . -12) (undo-tree-id344 . -12) (undo-tree-id345 . -12) (undo-tree-id346 . -12) 5463) nil (25343 52717 486197 800000) 0 nil] [nil nil ((#("            clik = nlsig2 - jacob
            return clik
        clik = nlsig2 - jacob
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 34 (fontified t) 34 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 57 (fontified t) 57 58 (fontified t) 58 66 (fontified t) 66 70 (fontified t face font-lock-variable-name-face) 70 88 (fontified t)) . 5451) (undo-tree-id79 . -12) (undo-tree-id80 . -58) (undo-tree-id81 . -66) (undo-tree-id82 . -58) (undo-tree-id84 . -58) (undo-tree-id86 . -62) (undo-tree-id88 . -34) (undo-tree-id90 . -38) (undo-tree-id92 . -42) (undo-tree-id94 . -1) (undo-tree-id96 . -5) (undo-tree-id98 . -9) (undo-tree-id100 . -12) (undo-tree-id102 . -12) (undo-tree-id104 . -12) (undo-tree-id106 . -12) (undo-tree-id108 . -12) (undo-tree-id110 . -12) (undo-tree-id112 . -12) (undo-tree-id114 . -12) (undo-tree-id116 . -12) (undo-tree-id118 . -12) (undo-tree-id120 . -12) (undo-tree-id122 . -12) 5463) ((5451 . 5539)) (25343 52711 691528 800000) 0 nil] [nil nil ((#("            clik = nlsig2 - jacob
            return clik
        clik = nlsig2 - jacob
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 34 (fontified t) 34 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 57 (fontified t) 57 58 (fontified t) 58 66 (fontified t) 66 70 (fontified t face font-lock-variable-name-face) 70 88 (fontified t)) . 5451) (undo-tree-id1 . -12) (undo-tree-id2 . -58) (undo-tree-id3 . -66) (undo-tree-id4 . -58) 5463) ((5451 . 5539)) (25343 52696 995306 300000) 0 nil])
([nil nil ((#("            clik = nlsig2 - jacob
            return clik
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 58 (fontified t)) . 5143) (undo-tree-id197 . -12) (undo-tree-id198 . -12) (undo-tree-id199 . -12) (undo-tree-id200 . -12) (undo-tree-id201 . -12) (undo-tree-id202 . -12) (undo-tree-id203 . -12) (undo-tree-id204 . -12) (undo-tree-id205 . -46) (undo-tree-id206 . -46) (undo-tree-id207 . -46) (undo-tree-id208 . -46) (undo-tree-id209 . -46) (undo-tree-id210 . -46) (undo-tree-id211 . -46) (undo-tree-id212 . -12) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -33) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -33) (undo-tree-id223 . -57) (undo-tree-id224 . -33) (undo-tree-id225 . -57) (undo-tree-id226 . -12) (undo-tree-id227 . -12) (undo-tree-id228 . -12) (undo-tree-id229 . -12) (undo-tree-id230 . -12) (undo-tree-id231 . -12) (undo-tree-id232 . -12) (undo-tree-id233 . -12) (undo-tree-id234 . -12) (undo-tree-id235 . -12) (undo-tree-id236 . -12) (undo-tree-id237 . -12) (undo-tree-id238 . -12) (undo-tree-id239 . -12) (undo-tree-id240 . -12) (undo-tree-id241 . -12) (undo-tree-id242 . -12) (undo-tree-id243 . -12) (undo-tree-id244 . -12) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -12) (undo-tree-id248 . -12) (undo-tree-id249 . -12) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -12) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -12) (undo-tree-id257 . -12) (undo-tree-id258 . -58) (undo-tree-id259 . -34) (undo-tree-id260 . -35) (undo-tree-id261 . -38) (undo-tree-id262 . -39) (undo-tree-id263 . -42) (undo-tree-id264 . -43) (undo-tree-id265 . -1) (undo-tree-id266 . -4) (undo-tree-id267 . -5) (undo-tree-id268 . -8) (undo-tree-id269 . -9) (undo-tree-id270 . -12) (undo-tree-id271 . -12) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -12) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -12) (undo-tree-id278 . -12) (undo-tree-id279 . -12) (undo-tree-id280 . -12) (undo-tree-id281 . -12) (undo-tree-id282 . -12) (undo-tree-id283 . -12) (undo-tree-id284 . -46) (undo-tree-id285 . -46) (undo-tree-id286 . -46) (undo-tree-id287 . -46) (undo-tree-id288 . -46) (undo-tree-id289 . -46) (undo-tree-id290 . -46) (undo-tree-id291 . -12) (undo-tree-id292 . -12) (undo-tree-id293 . -12) (undo-tree-id294 . -12) (undo-tree-id295 . -12) (undo-tree-id296 . -12) (undo-tree-id297 . -12) (undo-tree-id298 . -12) (undo-tree-id299 . -12) (undo-tree-id300 . -12) (undo-tree-id301 . -12) (undo-tree-id302 . -12) (undo-tree-id303 . -12) (undo-tree-id304 . -12) (undo-tree-id305 . -12) (undo-tree-id306 . -12) (undo-tree-id307 . -12) 5155) nil (25343 52717 486173 700000) 0 nil])
([nil nil ((#("            clik = nlsig2 - jacob
            return clik
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 58 (fontified t)) . 5143) (undo-tree-id123 . -12) (undo-tree-id124 . -12) (undo-tree-id125 . -12) (undo-tree-id126 . -12) (undo-tree-id127 . -12) (undo-tree-id128 . -12) (undo-tree-id129 . -12) (undo-tree-id130 . -12) (undo-tree-id131 . -46) (undo-tree-id132 . -46) (undo-tree-id133 . -46) (undo-tree-id134 . -46) (undo-tree-id135 . -46) (undo-tree-id136 . -46) (undo-tree-id137 . -46) (undo-tree-id138 . -12) (undo-tree-id139 . -12) (undo-tree-id140 . -12) (undo-tree-id141 . -12) (undo-tree-id142 . -12) (undo-tree-id143 . -12) (undo-tree-id144 . -12) (undo-tree-id145 . -33) (undo-tree-id146 . -12) (undo-tree-id147 . -12) (undo-tree-id148 . -33) (undo-tree-id149 . -57) (undo-tree-id150 . -33) (undo-tree-id151 . -57) (undo-tree-id152 . -12) (undo-tree-id153 . -12) (undo-tree-id154 . -12) (undo-tree-id155 . -12) (undo-tree-id156 . -12) (undo-tree-id157 . -12) (undo-tree-id158 . -12) (undo-tree-id159 . -12) (undo-tree-id160 . -12) (undo-tree-id161 . -58) (undo-tree-id162 . -34) (undo-tree-id163 . -35) (undo-tree-id164 . -38) (undo-tree-id165 . -39) (undo-tree-id166 . -42) (undo-tree-id167 . -43) (undo-tree-id168 . -1) (undo-tree-id169 . -4) (undo-tree-id170 . -5) (undo-tree-id171 . -8) (undo-tree-id172 . -9) (undo-tree-id173 . -12) (undo-tree-id174 . -12) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -12) (undo-tree-id189 . -12) (undo-tree-id190 . -12) (undo-tree-id191 . -12) (undo-tree-id192 . -12) (undo-tree-id193 . -12) (undo-tree-id194 . -12) (undo-tree-id195 . -12) (undo-tree-id196 . -12) 5155) ((5143 . 5201)) (25343 52711 691294 300000) 0 nil] [nil nil ((#("            clik = nlsig2 - jacob
            return clik
        else:
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 66 (fontified t) 66 70 (fontified t face font-lock-keyword-face) 70 72 (fontified t)) . 5143) (undo-tree-id15 . -12) (undo-tree-id16 . -72) (undo-tree-id17 . -58) (undo-tree-id18 . -59) (undo-tree-id19 . -62) (undo-tree-id20 . -63) (undo-tree-id21 . -34) (undo-tree-id22 . -35) (undo-tree-id23 . -38) (undo-tree-id24 . -39) (undo-tree-id25 . -42) (undo-tree-id26 . -43) (undo-tree-id27 . -1) (undo-tree-id28 . -4) (undo-tree-id29 . -5) (undo-tree-id30 . -8) (undo-tree-id31 . -9) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -12) (undo-tree-id37 . -12) (undo-tree-id38 . -12) (undo-tree-id39 . -70) (undo-tree-id40 . -70) (undo-tree-id41 . -70) (undo-tree-id42 . -70) (undo-tree-id43 . -70) (undo-tree-id44 . -70) (undo-tree-id45 . -70) (undo-tree-id46 . -46) (undo-tree-id47 . -46) (undo-tree-id48 . -46) (undo-tree-id49 . -46) (undo-tree-id50 . -46) (undo-tree-id51 . -46) (undo-tree-id52 . -46) (undo-tree-id53 . -12) (undo-tree-id54 . -12) (undo-tree-id55 . -12) (undo-tree-id56 . -12) (undo-tree-id57 . -12) (undo-tree-id58 . -12) (undo-tree-id59 . -12) (undo-tree-id60 . -33) (undo-tree-id61 . -12) (undo-tree-id62 . -12) (undo-tree-id63 . -33) (undo-tree-id64 . -57) (undo-tree-id65 . -71) (undo-tree-id66 . -33) (undo-tree-id67 . -57) (undo-tree-id68 . -71) (undo-tree-id69 . -12) (undo-tree-id70 . -12) (undo-tree-id71 . -12) (undo-tree-id72 . -12) (undo-tree-id73 . -12) (undo-tree-id74 . -12) (undo-tree-id75 . -12) (undo-tree-id76 . -12) (undo-tree-id77 . -12) (undo-tree-id78 . -12) 5155) ((5143 . 5215)) (25343 52706 642351 400000) 0 nil])
([nil nil ((#("            clik = nlsig2 - jacob
            return clik
        else:
" 0 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 66 (fontified t) 66 70 (fontified t face font-lock-keyword-face) 70 72 (fontified t)) . 5143) (undo-tree-id0 . -12) 5155) ((5143 . 5215)) (25343 52696 995075 700000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3925 . 3926) (3918 . 4073) (t 25343 52718 404031 300000)) nil (25343 53378 403119 100000) 0 nil])
nil
nil
nil
([nil nil ((#("        " 0 8 (fontified t)) . -3918) (undo-tree-id385 . -8) 3926 (3918 . 3926) (3918 . 3919) 3926) nil (25343 53378 403117 800000) 0 nil])
([nil nil ((#("        self.coef_ = params_[1:]
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 33 (fontified t)) . 4074) (undo-tree-id359 . -33) (undo-tree-id360 . -33) (undo-tree-id361 . -33) (undo-tree-id362 . -33) (undo-tree-id363 . -33) (undo-tree-id364 . -33) (undo-tree-id365 . -33) (undo-tree-id366 . -33) (undo-tree-id367 . -33) (undo-tree-id368 . -1) (undo-tree-id369 . -4) (undo-tree-id370 . -5) (undo-tree-id371 . -33) (undo-tree-id372 . -33) (undo-tree-id373 . -33) (undo-tree-id374 . -33) (undo-tree-id375 . -33) (undo-tree-id376 . -33) (undo-tree-id377 . -33) (undo-tree-id378 . -33) (undo-tree-id379 . -33) (undo-tree-id380 . -33) (undo-tree-id381 . -33) (undo-tree-id382 . -33) (undo-tree-id383 . -33) (undo-tree-id384 . -33)) nil (25343 53378 403114 800000) 0 nil])
([nil nil ((#("        self.intercept_ = params_[0]
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 36 (fontified t) 36 37 (fontified t)) . 4074) (undo-tree-id347 . -37) (undo-tree-id348 . -37) (undo-tree-id349 . -37) (undo-tree-id350 . -37) (undo-tree-id351 . -37) (undo-tree-id352 . -37) (undo-tree-id353 . -37) (undo-tree-id354 . -37) (undo-tree-id355 . -1) (undo-tree-id356 . -4) (undo-tree-id357 . -5) (undo-tree-id358 . -36)) nil (25343 53392 11138 0) 0 nil])
([nil nil ((2885 . 3040) 2894 (t 25343 53379 268970 200000)) nil (25343 53402 387420 0) 0 nil] [nil nil ((2885 . 2922) 2894 (t 25343 53379 268970 200000)) ((#("        self.intercept_ = params_[0]
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 36 (fontified t) 36 37 (fontified t)) . 2885) (undo-tree-id386 . -37) (undo-tree-id387 . -36) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -37) (undo-tree-id391 . -1) (undo-tree-id392 . -4) (undo-tree-id393 . -5) (undo-tree-id394 . -8)) (25343 53391 998561 200000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2885) (undo-tree-id433 . -1) (undo-tree-id434 . 1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) 2886 (#("    " 0 4 (fontified t)) . -2886) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -1) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) 2890 (#("    " 0 4 (fontified t)) . -2890) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -1) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) 2894 (#("    " 0 4 (fontified t)) . -2894) (undo-tree-id565 . -4) (undo-tree-id566 . -1) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) 2898 (2886 . 2898) (#("            " 0 12 (fontified nil)) . 2885) (undo-tree-id589 . -12) (undo-tree-id590 . -12) (undo-tree-id591 . -12) (undo-tree-id592 . -12) (undo-tree-id593 . -12) (undo-tree-id594 . -12) (undo-tree-id595 . -12) (undo-tree-id596 . -12) (undo-tree-id597 . -12) (undo-tree-id598 . -12) (undo-tree-id599 . -12) (undo-tree-id600 . -12) (undo-tree-id601 . -1) (undo-tree-id602 . -4) (undo-tree-id603 . -5) (undo-tree-id604 . -8) (undo-tree-id605 . -9) (2897 . 2898) (2885 . 2897) (2885 . 2886) 2893) nil (25343 53402 387412 700000) 0 nil])
nil
([nil nil ((#("        self.intercept_ = params_[0]
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 37 (fontified t)) . 3041) (undo-tree-id412 . -37) (undo-tree-id413 . -37) (undo-tree-id414 . -37) (undo-tree-id415 . -37) (undo-tree-id416 . -37) (undo-tree-id417 . -37) (undo-tree-id418 . -37) (undo-tree-id419 . -37) (undo-tree-id420 . -36) (undo-tree-id421 . -36) (undo-tree-id422 . -37) (undo-tree-id423 . -1) (undo-tree-id424 . -4) (undo-tree-id425 . -5) (undo-tree-id426 . -37) (undo-tree-id427 . -37) (undo-tree-id428 . -37) (undo-tree-id429 . -37) (undo-tree-id430 . -37) (undo-tree-id431 . -37) (undo-tree-id432 . -37)) nil (25343 53402 387313 600000) 0 nil])
([nil nil ((#("        self.coef_ = params_[1:]
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 32 (fontified t) 32 33 (fontified t)) . 3041) (undo-tree-id395 . -32) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -32) (undo-tree-id399 . -32) (undo-tree-id400 . -33) (undo-tree-id401 . -33) (undo-tree-id402 . -33) (undo-tree-id403 . -33) (undo-tree-id404 . -33) (undo-tree-id405 . -33) (undo-tree-id406 . -33) (undo-tree-id407 . -33) (undo-tree-id408 . -1) (undo-tree-id409 . -4) (undo-tree-id410 . -5) (undo-tree-id411 . -32)) nil (25343 53402 387299 400000) 0 nil])
([nil nil ((2990 . 2991) (t 25343 53403 246055 500000)) nil (25343 53543 661133 200000) 0 nil])
([nil nil ((4110 . 4111) (t 25343 53544 545204 200000)) nil (25343 53562 698284 500000) 0 nil])
([nil current ((4110 . 4111) (#(")" 0 1 (fontified t)) . 4110) (undo-tree-id606 . -1)) nil (25343 53562 698281 500000) 0 nil])
nil
